Terminales no usados en la gramática

    VERDAD
    FALSO
    RETORNA
    TERMINA
    NADA


Gramática

    0 $accept: prog $end

    1 prog: listainst

    2 listainst: instr listainst
    3          | %empty

    4 instr: declaracion
    5      | asignacion
    6      | comp
    7      | iterativa_while
    8      | condicional

    9 iterativa_while: MIENTRAS '(' comp ')' bloque

   10 condicional: IF '(' comp ')' bloque

   11 bloque: '{' listainst '}'

   12 declaracion: identificador ID

   13 @1: %empty

   14 $@2: %empty

   15 declaracion: CONST identificador ID @1 '=' $@2 expresion

   16 @3: %empty

   17 asignacion: ID @3 '=' expresion

   18 identificador: INT
   19              | FLOAT
   20              | DOUBLE
   21              | CHAR
   22              | LONG
   23              | VOID
   24              | BOOL
   25              | SHORT

   26 expresion: expr
   27          | comp
   28          | sumaunaria

   29 expr: expr '+' term
   30     | expr '-' term
   31     | term

   32 term: term opmult factor
   33     | factor

   34 opmult: '*'

   35 factor: NUM
   36       | '(' expr ')'
   37       | ID

   38 comp: expr '>' '=' expr
   39     | expr '>' expr
   40     | expr '<' expr
   41     | expr IGUALDAD expr

   42 sumaunaria: ID SUMAUN


Terminales con las reglas donde aparecen

    $end (0) 0
    '(' (40) 9 10 36
    ')' (41) 9 10 36
    '*' (42) 34
    '+' (43) 29
    '-' (45) 30
    '<' (60) 40
    '=' (61) 15 17 38
    '>' (62) 38 39
    '{' (123) 11
    '}' (125) 11
    error (256)
    MIENTRAS (258) 9
    IF (259) 10
    ID (260) 12 15 17 37 42
    NUM (261) 35
    SUMAUN (262) 42
    IGUALDAD (263) 41
    INT (264) 18
    LONG (265) 22
    SHORT (266) 25
    DOUBLE (267) 20
    FLOAT (268) 19
    CHAR (269) 21
    BOOL (270) 24
    VERDAD (271)
    FALSO (272)
    VOID (273) 23
    CONST (274) 15
    RETORNA (275)
    TERMINA (276)
    NADA (277)


No terminales con las reglas donde aparecen

    $accept (33)
        on left: 0
    prog (34)
        on left: 1
        on right: 0
    listainst (35)
        on left: 2 3
        on right: 1 2 11
    instr (36)
        on left: 4 5 6 7 8
        on right: 2
    iterativa_while (37)
        on left: 9
        on right: 7
    condicional (38)
        on left: 10
        on right: 8
    bloque (39)
        on left: 11
        on right: 9 10
    declaracion (40)
        on left: 12 15
        on right: 4
    @1 (41)
        on left: 13
        on right: 15
    $@2 (42)
        on left: 14
        on right: 15
    asignacion (43)
        on left: 17
        on right: 5
    @3 (44)
        on left: 16
        on right: 17
    identificador (45)
        on left: 18 19 20 21 22 23 24 25
        on right: 12 15
    expresion (46)
        on left: 26 27 28
        on right: 15 17
    expr (47)
        on left: 29 30 31
        on right: 26 29 30 36 38 39 40 41
    term (48)
        on left: 32 33
        on right: 29 30 31 32
    opmult (49)
        on left: 34
        on right: 32
    factor (50)
        on left: 35 36 37
        on right: 32 33
    comp (51)
        on left: 38 39 40 41
        on right: 6 9 10 27
    sumaunaria (52)
        on left: 42
        on right: 28


Estado 0

    0 $accept: . prog $end

    MIENTRAS  desplazar e ir al estado 1
    IF        desplazar e ir al estado 2
    ID        desplazar e ir al estado 3
    NUM       desplazar e ir al estado 4
    INT       desplazar e ir al estado 5
    LONG      desplazar e ir al estado 6
    SHORT     desplazar e ir al estado 7
    DOUBLE    desplazar e ir al estado 8
    FLOAT     desplazar e ir al estado 9
    CHAR      desplazar e ir al estado 10
    BOOL      desplazar e ir al estado 11
    VOID      desplazar e ir al estado 12
    CONST     desplazar e ir al estado 13
    '('       desplazar e ir al estado 14

    $default  reduce usando la regla 3 (listainst)

    prog             ir al estado 15
    listainst        ir al estado 16
    instr            ir al estado 17
    iterativa_while  ir al estado 18
    condicional      ir al estado 19
    declaracion      ir al estado 20
    asignacion       ir al estado 21
    identificador    ir al estado 22
    expr             ir al estado 23
    term             ir al estado 24
    factor           ir al estado 25
    comp             ir al estado 26


Estado 1

    9 iterativa_while: MIENTRAS . '(' comp ')' bloque

    '('  desplazar e ir al estado 27


Estado 2

   10 condicional: IF . '(' comp ')' bloque

    '('  desplazar e ir al estado 28


Estado 3

   17 asignacion: ID . @3 '=' expresion
   37 factor: ID .

    '='       reduce usando la regla 16 (@3)
    $default  reduce usando la regla 37 (factor)

    @3  ir al estado 29


Estado 4

   35 factor: NUM .

    $default  reduce usando la regla 35 (factor)


Estado 5

   18 identificador: INT .

    $default  reduce usando la regla 18 (identificador)


Estado 6

   22 identificador: LONG .

    $default  reduce usando la regla 22 (identificador)


Estado 7

   25 identificador: SHORT .

    $default  reduce usando la regla 25 (identificador)


Estado 8

   20 identificador: DOUBLE .

    $default  reduce usando la regla 20 (identificador)


Estado 9

   19 identificador: FLOAT .

    $default  reduce usando la regla 19 (identificador)


Estado 10

   21 identificador: CHAR .

    $default  reduce usando la regla 21 (identificador)


Estado 11

   24 identificador: BOOL .

    $default  reduce usando la regla 24 (identificador)


Estado 12

   23 identificador: VOID .

    $default  reduce usando la regla 23 (identificador)


Estado 13

   15 declaracion: CONST . identificador ID @1 '=' $@2 expresion

    INT     desplazar e ir al estado 5
    LONG    desplazar e ir al estado 6
    SHORT   desplazar e ir al estado 7
    DOUBLE  desplazar e ir al estado 8
    FLOAT   desplazar e ir al estado 9
    CHAR    desplazar e ir al estado 10
    BOOL    desplazar e ir al estado 11
    VOID    desplazar e ir al estado 12

    identificador  ir al estado 30


Estado 14

   36 factor: '(' . expr ')'

    ID   desplazar e ir al estado 31
    NUM  desplazar e ir al estado 4
    '('  desplazar e ir al estado 14

    expr    ir al estado 32
    term    ir al estado 24
    factor  ir al estado 25


Estado 15

    0 $accept: prog . $end

    $end  desplazar e ir al estado 33


Estado 16

    1 prog: listainst .

    $default  reduce usando la regla 1 (prog)


Estado 17

    2 listainst: instr . listainst

    MIENTRAS  desplazar e ir al estado 1
    IF        desplazar e ir al estado 2
    ID        desplazar e ir al estado 3
    NUM       desplazar e ir al estado 4
    INT       desplazar e ir al estado 5
    LONG      desplazar e ir al estado 6
    SHORT     desplazar e ir al estado 7
    DOUBLE    desplazar e ir al estado 8
    FLOAT     desplazar e ir al estado 9
    CHAR      desplazar e ir al estado 10
    BOOL      desplazar e ir al estado 11
    VOID      desplazar e ir al estado 12
    CONST     desplazar e ir al estado 13
    '('       desplazar e ir al estado 14

    $default  reduce usando la regla 3 (listainst)

    listainst        ir al estado 34
    instr            ir al estado 17
    iterativa_while  ir al estado 18
    condicional      ir al estado 19
    declaracion      ir al estado 20
    asignacion       ir al estado 21
    identificador    ir al estado 22
    expr             ir al estado 23
    term             ir al estado 24
    factor           ir al estado 25
    comp             ir al estado 26


Estado 18

    7 instr: iterativa_while .

    $default  reduce usando la regla 7 (instr)


Estado 19

    8 instr: condicional .

    $default  reduce usando la regla 8 (instr)


Estado 20

    4 instr: declaracion .

    $default  reduce usando la regla 4 (instr)


Estado 21

    5 instr: asignacion .

    $default  reduce usando la regla 5 (instr)


Estado 22

   12 declaracion: identificador . ID

    ID  desplazar e ir al estado 35


Estado 23

   29 expr: expr . '+' term
   30     | expr . '-' term
   38 comp: expr . '>' '=' expr
   39     | expr . '>' expr
   40     | expr . '<' expr
   41     | expr . IGUALDAD expr

    IGUALDAD  desplazar e ir al estado 36
    '+'       desplazar e ir al estado 37
    '-'       desplazar e ir al estado 38
    '>'       desplazar e ir al estado 39
    '<'       desplazar e ir al estado 40


Estado 24

   31 expr: term .
   32 term: term . opmult factor

    '*'  desplazar e ir al estado 41

    $default  reduce usando la regla 31 (expr)

    opmult  ir al estado 42


Estado 25

   33 term: factor .

    $default  reduce usando la regla 33 (term)


Estado 26

    6 instr: comp .

    $default  reduce usando la regla 6 (instr)


Estado 27

    9 iterativa_while: MIENTRAS '(' . comp ')' bloque

    ID   desplazar e ir al estado 31
    NUM  desplazar e ir al estado 4
    '('  desplazar e ir al estado 14

    expr    ir al estado 23
    term    ir al estado 24
    factor  ir al estado 25
    comp    ir al estado 43


Estado 28

   10 condicional: IF '(' . comp ')' bloque

    ID   desplazar e ir al estado 31
    NUM  desplazar e ir al estado 4
    '('  desplazar e ir al estado 14

    expr    ir al estado 23
    term    ir al estado 24
    factor  ir al estado 25
    comp    ir al estado 44


Estado 29

   17 asignacion: ID @3 . '=' expresion

    '='  desplazar e ir al estado 45


Estado 30

   15 declaracion: CONST identificador . ID @1 '=' $@2 expresion

    ID  desplazar e ir al estado 46


Estado 31

   37 factor: ID .

    $default  reduce usando la regla 37 (factor)


Estado 32

   29 expr: expr . '+' term
   30     | expr . '-' term
   36 factor: '(' expr . ')'

    ')'  desplazar e ir al estado 47
    '+'  desplazar e ir al estado 37
    '-'  desplazar e ir al estado 38


Estado 33

    0 $accept: prog $end .

    $default  aceptar


Estado 34

    2 listainst: instr listainst .

    $default  reduce usando la regla 2 (listainst)


Estado 35

   12 declaracion: identificador ID .

    $default  reduce usando la regla 12 (declaracion)


Estado 36

   41 comp: expr IGUALDAD . expr

    ID   desplazar e ir al estado 31
    NUM  desplazar e ir al estado 4
    '('  desplazar e ir al estado 14

    expr    ir al estado 48
    term    ir al estado 24
    factor  ir al estado 25


Estado 37

   29 expr: expr '+' . term

    ID   desplazar e ir al estado 31
    NUM  desplazar e ir al estado 4
    '('  desplazar e ir al estado 14

    term    ir al estado 49
    factor  ir al estado 25


Estado 38

   30 expr: expr '-' . term

    ID   desplazar e ir al estado 31
    NUM  desplazar e ir al estado 4
    '('  desplazar e ir al estado 14

    term    ir al estado 50
    factor  ir al estado 25


Estado 39

   38 comp: expr '>' . '=' expr
   39     | expr '>' . expr

    ID   desplazar e ir al estado 31
    NUM  desplazar e ir al estado 4
    '('  desplazar e ir al estado 14
    '='  desplazar e ir al estado 51

    expr    ir al estado 52
    term    ir al estado 24
    factor  ir al estado 25


Estado 40

   40 comp: expr '<' . expr

    ID   desplazar e ir al estado 31
    NUM  desplazar e ir al estado 4
    '('  desplazar e ir al estado 14

    expr    ir al estado 53
    term    ir al estado 24
    factor  ir al estado 25


Estado 41

   34 opmult: '*' .

    $default  reduce usando la regla 34 (opmult)


Estado 42

   32 term: term opmult . factor

    ID   desplazar e ir al estado 31
    NUM  desplazar e ir al estado 4
    '('  desplazar e ir al estado 14

    factor  ir al estado 54


Estado 43

    9 iterativa_while: MIENTRAS '(' comp . ')' bloque

    ')'  desplazar e ir al estado 55


Estado 44

   10 condicional: IF '(' comp . ')' bloque

    ')'  desplazar e ir al estado 56


Estado 45

   17 asignacion: ID @3 '=' . expresion

    ID   desplazar e ir al estado 57
    NUM  desplazar e ir al estado 4
    '('  desplazar e ir al estado 14

    expresion   ir al estado 58
    expr        ir al estado 59
    term        ir al estado 24
    factor      ir al estado 25
    comp        ir al estado 60
    sumaunaria  ir al estado 61


Estado 46

   15 declaracion: CONST identificador ID . @1 '=' $@2 expresion

    $default  reduce usando la regla 13 (@1)

    @1  ir al estado 62


Estado 47

   36 factor: '(' expr ')' .

    $default  reduce usando la regla 36 (factor)


Estado 48

   29 expr: expr . '+' term
   30     | expr . '-' term
   41 comp: expr IGUALDAD expr .

    '+'  desplazar e ir al estado 37
    '-'  desplazar e ir al estado 38

    $default  reduce usando la regla 41 (comp)


Estado 49

   29 expr: expr '+' term .
   32 term: term . opmult factor

    '*'  desplazar e ir al estado 41

    $default  reduce usando la regla 29 (expr)

    opmult  ir al estado 42


Estado 50

   30 expr: expr '-' term .
   32 term: term . opmult factor

    '*'  desplazar e ir al estado 41

    $default  reduce usando la regla 30 (expr)

    opmult  ir al estado 42


Estado 51

   38 comp: expr '>' '=' . expr

    ID   desplazar e ir al estado 31
    NUM  desplazar e ir al estado 4
    '('  desplazar e ir al estado 14

    expr    ir al estado 63
    term    ir al estado 24
    factor  ir al estado 25


Estado 52

   29 expr: expr . '+' term
   30     | expr . '-' term
   39 comp: expr '>' expr .

    '+'  desplazar e ir al estado 37
    '-'  desplazar e ir al estado 38

    $default  reduce usando la regla 39 (comp)


Estado 53

   29 expr: expr . '+' term
   30     | expr . '-' term
   40 comp: expr '<' expr .

    '+'  desplazar e ir al estado 37
    '-'  desplazar e ir al estado 38

    $default  reduce usando la regla 40 (comp)


Estado 54

   32 term: term opmult factor .

    $default  reduce usando la regla 32 (term)


Estado 55

    9 iterativa_while: MIENTRAS '(' comp ')' . bloque

    '{'  desplazar e ir al estado 64

    bloque  ir al estado 65


Estado 56

   10 condicional: IF '(' comp ')' . bloque

    '{'  desplazar e ir al estado 64

    bloque  ir al estado 66


Estado 57

   37 factor: ID .
   42 sumaunaria: ID . SUMAUN

    SUMAUN  desplazar e ir al estado 67

    $default  reduce usando la regla 37 (factor)


Estado 58

   17 asignacion: ID @3 '=' expresion .

    $default  reduce usando la regla 17 (asignacion)


Estado 59

   26 expresion: expr .
   29 expr: expr . '+' term
   30     | expr . '-' term
   38 comp: expr . '>' '=' expr
   39     | expr . '>' expr
   40     | expr . '<' expr
   41     | expr . IGUALDAD expr

    IGUALDAD  desplazar e ir al estado 36
    '+'       desplazar e ir al estado 37
    '-'       desplazar e ir al estado 38
    '>'       desplazar e ir al estado 39
    '<'       desplazar e ir al estado 40

    $default  reduce usando la regla 26 (expresion)


Estado 60

   27 expresion: comp .

    $default  reduce usando la regla 27 (expresion)


Estado 61

   28 expresion: sumaunaria .

    $default  reduce usando la regla 28 (expresion)


Estado 62

   15 declaracion: CONST identificador ID @1 . '=' $@2 expresion

    '='  desplazar e ir al estado 68


Estado 63

   29 expr: expr . '+' term
   30     | expr . '-' term
   38 comp: expr '>' '=' expr .

    '+'  desplazar e ir al estado 37
    '-'  desplazar e ir al estado 38

    $default  reduce usando la regla 38 (comp)


Estado 64

   11 bloque: '{' . listainst '}'

    MIENTRAS  desplazar e ir al estado 1
    IF        desplazar e ir al estado 2
    ID        desplazar e ir al estado 3
    NUM       desplazar e ir al estado 4
    INT       desplazar e ir al estado 5
    LONG      desplazar e ir al estado 6
    SHORT     desplazar e ir al estado 7
    DOUBLE    desplazar e ir al estado 8
    FLOAT     desplazar e ir al estado 9
    CHAR      desplazar e ir al estado 10
    BOOL      desplazar e ir al estado 11
    VOID      desplazar e ir al estado 12
    CONST     desplazar e ir al estado 13
    '('       desplazar e ir al estado 14

    $default  reduce usando la regla 3 (listainst)

    listainst        ir al estado 69
    instr            ir al estado 17
    iterativa_while  ir al estado 18
    condicional      ir al estado 19
    declaracion      ir al estado 20
    asignacion       ir al estado 21
    identificador    ir al estado 22
    expr             ir al estado 23
    term             ir al estado 24
    factor           ir al estado 25
    comp             ir al estado 26


Estado 65

    9 iterativa_while: MIENTRAS '(' comp ')' bloque .

    $default  reduce usando la regla 9 (iterativa_while)


Estado 66

   10 condicional: IF '(' comp ')' bloque .

    $default  reduce usando la regla 10 (condicional)


Estado 67

   42 sumaunaria: ID SUMAUN .

    $default  reduce usando la regla 42 (sumaunaria)


Estado 68

   15 declaracion: CONST identificador ID @1 '=' . $@2 expresion

    $default  reduce usando la regla 14 ($@2)

    $@2  ir al estado 70


Estado 69

   11 bloque: '{' listainst . '}'

    '}'  desplazar e ir al estado 71


Estado 70

   15 declaracion: CONST identificador ID @1 '=' $@2 . expresion

    ID   desplazar e ir al estado 57
    NUM  desplazar e ir al estado 4
    '('  desplazar e ir al estado 14

    expresion   ir al estado 72
    expr        ir al estado 59
    term        ir al estado 24
    factor      ir al estado 25
    comp        ir al estado 60
    sumaunaria  ir al estado 61


Estado 71

   11 bloque: '{' listainst '}' .

    $default  reduce usando la regla 11 (bloque)


Estado 72

   15 declaracion: CONST identificador ID @1 '=' $@2 expresion .

    $default  reduce usando la regla 15 (declaracion)
